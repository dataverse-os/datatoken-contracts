/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ProfilelessDataToken,
  ProfilelessDataTokenInterface,
  DataTypes,
} from "../../Profileless/ProfilelessDataToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "contentURI",
        type: "string",
      },
      {
        components: [
          {
            internalType: "address",
            name: "originalContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "profileId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pubId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "collectModule",
            type: "address",
          },
        ],
        internalType: "struct DataTypes.Metadata",
        name: "metadata",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "collect",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContentURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataTokenOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFeeRecipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "originalContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "profileId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pubId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "collectModule",
            type: "address",
          },
        ],
        internalType: "struct DataTypes.Metadata",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "isCollected",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040526000600c553480156200001657600080fd5b5060405162001b9638038062001b968339810160408190526200003991620002ca565b604080518082018252601581527f44617461546f6b656e2d416363657373546f6b656e00000000000000000000006020808301918252835180850190945260048452631115105560e21b908401528151859385939290916200009e9160009162000145565b508051620000b490600190602084019062000145565b50508151600680546001600160a01b03199081166001600160a01b0393841617909155602080850151600755604080860151600855606086015160098054909416941693909317909155336080528151808301909252848252428282015284519192508291600a916200012c91839188019062000145565b50602082015181600101559050505050505050620003da565b82805462000153906200039d565b90600052602060002090601f016020900481019282620001775760008555620001c2565b82601f106200019257805160ff1916838001178555620001c2565b82800160010185558215620001c2579182015b82811115620001c2578251825591602001919060010190620001a5565b50620001d0929150620001d4565b5090565b5b80821115620001d05760008155600101620001d5565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156200022c576200022c620001eb565b604052919050565b80516001600160a01b03811681146200024c57600080fd5b919050565b6000608082840312156200026457600080fd5b604051608081016001600160401b0381118282101715620002895762000289620001eb565b6040529050806200029a8362000234565b81526020830151602082015260408301516040820152620002be6060840162000234565b60608201525092915050565b60008060a08385031215620002de57600080fd5b82516001600160401b0380821115620002f657600080fd5b818501915085601f8301126200030b57600080fd5b815181811115620003205762000320620001eb565b6020915062000338601f8201601f1916830162000201565b81815287838386010111156200034d57600080fd5b60005b828110156200036d57848101840151828201850152830162000350565b828111156200037f5760008484840101525b5094506200039290508686830162000251565b925050509250929050565b600181811c90821680620003b257607f821691505b60208210811415620003d457634e487b7160e01b600052602260045260246000fd5b50919050565b6080516117a0620003f660003960006107ec01526117a06000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806377b46d4d116100ad578063a22cb46511610071578063a22cb465146102c9578063a9b5ffd9146102dc578063b88d4fde146102ef578063c87b56dd14610302578063e985e9c51461031557600080fd5b806377b46d4d146102055780637a5b4f591461020d57806383e46e78146101c957806395d89b41146102ae5780639824aab5146102b657600080fd5b806323b872dd116100f457806323b872dd146101a357806342842e0e146101b65780634ccb20c0146101c95780636352211e146101d157806370a08231146101e457600080fd5b806301ffc9a71461012657806306fdde031461014e578063081812fc14610163578063095ea7b31461018e575b600080fd5b6101396101343660046111aa565b610351565b60405190151581526020015b60405180910390f35b6101566103a3565b604051610145919061121f565b610176610171366004611232565b610435565b6040516001600160a01b039091168152602001610145565b6101a161019c366004611260565b61045c565b005b6101a16101b136600461128c565b610577565b6101a16101c436600461128c565b6105a8565b6101766105c3565b6101766101df366004611232565b6105d2565b6101f76101f23660046112cd565b610632565b604051908152602001610145565b6101566106b8565b61026f60408051608081018252600080825260208201819052918101829052606081019190915250604080516080810182526006546001600160a01b039081168252600754602083015260085492820192909252600954909116606082015290565b604051610145919081516001600160a01b0390811682526020808401519083015260408084015190830152606092830151169181019190915260800190565b6101566106ca565b6101396102c43660046112cd565b6106d9565b6101a16102d73660046112ea565b61071f565b6101f76102ea3660046113ed565b61072e565b6101a16102fd366004611422565b610853565b610156610310366004611232565b61088b565b61013961032336600461148e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061038257506001600160e01b03198216635b5e139f60e01b145b8061039d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103b2906114bc565b80601f01602080910402602001604051908101604052809291908181526020018280546103de906114bc565b801561042b5780601f106104005761010080835404028352916020019161042b565b820191906000526020600020905b81548152906001019060200180831161040e57829003601f168201915b5050505050905090565b6000610440826108ff565b506000908152600460205260409020546001600160a01b031690565b6000610467826105d2565b9050806001600160a01b0316836001600160a01b031614156104da5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806104f657506104f68133610323565b6105685760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104d1565b6105728383610961565b505050565b61058133826109cf565b61059d5760405162461bcd60e51b81526004016104d1906114f7565b610572838383610a4e565b61057283838360405180602001604052806000815250610853565b60006105cd610bb2565b905090565b6000818152600260205260408120546001600160a01b03168061039d5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104d1565b60006001600160a01b03821661069c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104d1565b506001600160a01b031660009081526003602052604090205490565b6060600a60000180546103b2906114bc565b6060600180546103b2906114bc565b6000816001600160a01b03166106ed610bb2565b6001600160a01b0316148061070a5750600061070883610632565b115b1561071757506001919050565b506000919050565b61072a338383610c1f565b5050565b6000806000838060200190518101906107479190611544565b6009546008546040516303adc86f60e11b81529395509193506001600160a01b03169163075b90de9161078091869086906004016115d1565b600060405180830381600087803b15801561079a57600080fd5b505af11580156107ae573d6000803e3d6000fd5b5050505060006107bd83610cee565b6040516367b8366160e11b81526001600160a01b038581166004830152306024830152604482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063cf706cc290606401600060405180830381600087803b15801561083257600080fd5b505af1158015610846573d6000803e3d6000fd5b5092979650505050505050565b61085d33836109cf565b6108795760405162461bcd60e51b81526004016104d1906114f7565b61088584848484610d16565b50505050565b6060610896826108ff565b60006108ad60408051602081019091526000815290565b905060008151116108cd57604051806020016040528060008152506108f8565b806108d784610d49565b6040516020016108e8929190611604565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b031661095e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016104d1565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610996826105d2565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806109db836105d2565b9050806001600160a01b0316846001600160a01b03161480610a2257506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610a465750836001600160a01b0316610a3b84610435565b6001600160a01b0316145b949350505050565b826001600160a01b0316610a61826105d2565b6001600160a01b031614610a875760405162461bcd60e51b81526004016104d190611633565b6001600160a01b038216610ae95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104d1565b826001600160a01b0316610afc826105d2565b6001600160a01b031614610b225760405162461bcd60e51b81526004016104d190611633565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6006546040516309be524d60e31b81523060048201526000916001600160a01b031690634df2926890602401602060405180830381865afa158015610bfb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cd9190611678565b816001600160a01b0316836001600160a01b03161415610c815760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104d1565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6000610cfc82600c54610de6565b600c8054906000610d0c83611695565b9091555092915050565b610d21848484610a4e565b610d2d84848484610e00565b6108855760405162461bcd60e51b81526004016104d1906116be565b60606000610d5683610efe565b600101905060008167ffffffffffffffff811115610d7657610d76611328565b6040519080825280601f01601f191660200182016040528015610da0576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610dd957610dde565b610daa565b509392505050565b61072a828260405180602001604052806000815250610fd6565b60006001600160a01b0384163b15610ef357604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610e44903390899088908890600401611710565b6020604051808303816000875af1925050508015610e7f575060408051601f3d908101601f19168201909252610e7c9181019061174d565b60015b610ed9573d808015610ead576040519150601f19603f3d011682016040523d82523d6000602084013e610eb2565b606091505b508051610ed15760405162461bcd60e51b81526004016104d1906116be565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a46565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610f3d5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610f69576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610f8757662386f26fc10000830492506010015b6305f5e1008310610f9f576305f5e100830492506008015b6127108310610fb357612710830492506004015b60648310610fc5576064830492506002015b600a831061039d5760010192915050565b610fe08383611009565b610fed6000848484610e00565b6105725760405162461bcd60e51b81526004016104d1906116be565b6001600160a01b03821661105f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104d1565b6000818152600260205260409020546001600160a01b0316156110c45760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104d1565b6000818152600260205260409020546001600160a01b0316156111295760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104d1565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b03198116811461095e57600080fd5b6000602082840312156111bc57600080fd5b81356108f881611194565b60005b838110156111e25781810151838201526020016111ca565b838111156108855750506000910152565b6000815180845261120b8160208601602086016111c7565b601f01601f19169290920160200192915050565b6020815260006108f860208301846111f3565b60006020828403121561124457600080fd5b5035919050565b6001600160a01b038116811461095e57600080fd5b6000806040838503121561127357600080fd5b823561127e8161124b565b946020939093013593505050565b6000806000606084860312156112a157600080fd5b83356112ac8161124b565b925060208401356112bc8161124b565b929592945050506040919091013590565b6000602082840312156112df57600080fd5b81356108f88161124b565b600080604083850312156112fd57600080fd5b82356113088161124b565b91506020830135801515811461131d57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561136757611367611328565b604052919050565b600067ffffffffffffffff82111561138957611389611328565b50601f01601f191660200190565b600082601f8301126113a857600080fd5b81356113bb6113b68261136f565b61133e565b8181528460208386010111156113d057600080fd5b816020850160208301376000918101602001919091529392505050565b6000602082840312156113ff57600080fd5b813567ffffffffffffffff81111561141657600080fd5b610a4684828501611397565b6000806000806080858703121561143857600080fd5b84356114438161124b565b935060208501356114538161124b565b925060408501359150606085013567ffffffffffffffff81111561147657600080fd5b61148287828801611397565b91505092959194509250565b600080604083850312156114a157600080fd5b82356114ac8161124b565b9150602083013561131d8161124b565b600181811c908216806114d057607f821691505b602082108114156114f157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b6000806040838503121561155757600080fd5b82516115628161124b565b602084015190925067ffffffffffffffff81111561157f57600080fd5b8301601f8101851361159057600080fd5b805161159e6113b68261136f565b8181528660208385010111156115b357600080fd5b6115c48260208301602086016111c7565b8093505050509250929050565b8381526001600160a01b03831660208201526060604082018190526000906115fb908301846111f3565b95945050505050565b600083516116168184602088016111c7565b83519083019061162a8183602088016111c7565b01949350505050565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60006020828403121561168a57600080fd5b81516108f88161124b565b60006000198214156116b757634e487b7160e01b600052601160045260246000fd5b5060010190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611743908301846111f3565b9695505050505050565b60006020828403121561175f57600080fd5b81516108f88161119456fea26469706673582212204b509910ede1a553126d5091fa7ec5ed3fc12ccf43ab13deb17842c07aac2a3e64736f6c634300080a0033";

type ProfilelessDataTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ProfilelessDataTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ProfilelessDataToken__factory extends ContractFactory {
  constructor(...args: ProfilelessDataTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    contentURI: string,
    metadata: DataTypes.MetadataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ProfilelessDataToken> {
    return super.deploy(
      contentURI,
      metadata,
      overrides || {}
    ) as Promise<ProfilelessDataToken>;
  }
  override getDeployTransaction(
    contentURI: string,
    metadata: DataTypes.MetadataStruct,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(contentURI, metadata, overrides || {});
  }
  override attach(address: string): ProfilelessDataToken {
    return super.attach(address) as ProfilelessDataToken;
  }
  override connect(signer: Signer): ProfilelessDataToken__factory {
    return super.connect(signer) as ProfilelessDataToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProfilelessDataTokenInterface {
    return new utils.Interface(_abi) as ProfilelessDataTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ProfilelessDataToken {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ProfilelessDataToken;
  }
}
