/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CyberDataToken,
  CyberDataTokenInterface,
  DataTypes,
} from "../../Cyber/CyberDataToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "dataTokenHub",
        type: "address",
      },
      {
        internalType: "string",
        name: "contentURI",
        type: "string",
      },
      {
        components: [
          {
            internalType: "address",
            name: "originalContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "profileId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pubId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "collectModule",
            type: "address",
          },
        ],
        internalType: "struct DataTypes.Metadata",
        name: "metadata",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "collect",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getContentURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataTokenOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFeeRecipient",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMetadata",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "originalContract",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "profileId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pubId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "collectModule",
            type: "address",
          },
        ],
        internalType: "struct DataTypes.Metadata",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "isCollected",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b5060405162000dc038038062000dc0833981016040819052620000349162000253565b8051600080546001600160a01b03199081166001600160a01b0393841617909155602080840151600155604080850151600255606085015160038054909416908516179092559185166080523360a05280518082019091528381524281830152835185928592859290918291600491620000b3918391880190620000ce565b50602082015181600101559050505050505050505062000377565b828054620000dc906200033b565b90600052602060002090601f0160209004810192826200010057600085556200014b565b82601f106200011b57805160ff19168380011785556200014b565b828001600101855582156200014b579182015b828111156200014b5782518255916020019190600101906200012e565b50620001599291506200015d565b5090565b5b808211156200015957600081556001016200015e565b80516001600160a01b03811681146200018c57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001d257620001d262000191565b604052919050565b600060808284031215620001ed57600080fd5b604051608081016001600160401b038111828210171562000212576200021262000191565b604052905080620002238362000174565b81526020830151602082015260408301516040820152620002476060840162000174565b60608201525092915050565b600080600060c084860312156200026957600080fd5b620002748462000174565b602085810151919450906001600160401b03808211156200029457600080fd5b818701915087601f830112620002a957600080fd5b815181811115620002be57620002be62000191565b620002d2601f8201601f19168501620001a7565b91508082528884828501011115620002e957600080fd5b60005b8181101562000309578381018501518382018601528401620002ec565b818111156200031b5760008583850101525b5050809450505050620003328560408601620001da565b90509250925092565b600181811c908216806200035057607f821691505b6020821081036200037157634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a051610a266200039a6000396000505060006104b90152610a266000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80634ccb20c01461006757806377b46d4d1461008c5780637a5b4f59146100a157806383e46e78146100675780639824aab514610142578063a9b5ffd914610165575b600080fd5b61006f61017a565b6040516001600160a01b0390911681526020015b60405180910390f35b610094610189565b60405161008391906105f4565b61010360408051608081018252600080825260208201819052918101829052606081019190915250604080516080810182526000546001600160a01b039081168252600154602083015260025492820192909252600354909116606082015290565b604051610083919081516001600160a01b0390811682526020808401519083015260408084015190830152606092830151169181019190915260800190565b610155610150366004610626565b61021e565b6040519015158152602001610083565b6101786101733660046106db565b61035e565b005b6000610184610521565b905090565b60606004600001805461019b9061075b565b80601f01602080910402602001604051908101604052809291908181526020018280546101c79061075b565b80156102145780601f106101e957610100808354040283529160200191610214565b820191906000526020600020905b8154815290600101906020018083116101f757829003601f168201915b5050505050905090565b600061022861017a565b6001600160a01b0316826001600160a01b03160361024857506001919050565b60008054600154600254604051631525b8fd60e31b8152600481019290925260248201526001600160a01b039091169063a92dc7e890604401602060405180830381865afa15801561029e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c29190610795565b90506001600160a01b0381161580159061034757506040516370a0823160e01b81526001600160a01b038481166004830152600091908316906370a0823190602401602060405180830381865afa158015610321573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034591906107b2565b115b156103555750600192915050565b50600192915050565b60008060008060008580602001905181019061037a919061089f565b60008054604051631500d99160e21b8152969b509499509297509095509350916001600160a01b03909116906354036644906103c29089908990899089908990600401610968565b6020604051808303816000875af11580156103e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040591906107b2565b6000805460208901516040808b01519051631525b8fd60e31b81526004810192909252602482015292935090916001600160a01b039091169063a92dc7e890604401602060405180830381865afa158015610464573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104889190610795565b6040516367b8366160e11b81526001600160a01b0386811660048301528083166024830152604482018590529192507f00000000000000000000000000000000000000000000000000000000000000009091169063cf706cc290606401600060405180830381600087803b1580156104ff57600080fd5b505af1158015610513573d6000803e3d6000fd5b505050505050505050505050565b600080546001546040516331a9108f60e11b81526001600160a01b0390921691636352211e916105579160040190815260200190565b602060405180830381865afa158015610574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101849190610795565b60005b838110156105b357818101518382015260200161059b565b838111156105c2576000848401525b50505050565b600081518084526105e0816020860160208601610598565b601f01601f19169290920160200192915050565b60208152600061060760208301846105c8565b9392505050565b6001600160a01b038116811461062357600080fd5b50565b60006020828403121561063857600080fd5b81356106078161060e565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561067c5761067c610643565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156106ab576106ab610643565b604052919050565b600067ffffffffffffffff8211156106cd576106cd610643565b50601f01601f191660200190565b6000602082840312156106ed57600080fd5b813567ffffffffffffffff81111561070457600080fd5b8201601f8101841361071557600080fd5b8035610728610723826106b3565b610682565b81815285602083850101111561073d57600080fd5b81602084016020830137600091810160200191909152949350505050565b600181811c9082168061076f57607f821691505b60208210810361078f57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156107a757600080fd5b81516106078161060e565b6000602082840312156107c457600080fd5b5051919050565b600082601f8301126107dc57600080fd5b81516107ea610723826106b3565b8181528460208386010111156107ff57600080fd5b610810826020830160208701610598565b949350505050565b80516108238161060e565b919050565b60006080828403121561083a57600080fd5b6040516080810181811067ffffffffffffffff8211171561085d5761085d610643565b8060405250809150825160ff8116811461087657600080fd5b808252506020830151602082015260408301516040820152606083015160608201525092915050565b60008060008060008587036101408112156108b957600080fd5b60608112156108c757600080fd5b506108d0610659565b86516108db8161060e565b81526020878101519082015260408088015190820152606087015190955067ffffffffffffffff8082111561090f57600080fd5b61091b89838a016107cb565b9550608088015191508082111561093157600080fd5b5061093e888289016107cb565b93505061094d60a08701610818565b915061095c8760c08801610828565b90509295509295909350565b600061014060018060a01b0380895116845260208901516020850152604089015160408501528160608501526109a0828501896105c8565b915083820360808501526109b482886105c8565b951660a08401525050815160ff1660c0820152602082015160e0820152604082015161010082015260609091015161012090910152939250505056fea2646970667358221220b59fbe04e318406b582ec8d2d8bfde14933178fcdac13aeb49a9c6d9e1cf082c64736f6c634300080e0033";

type CyberDataTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CyberDataTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CyberDataToken__factory extends ContractFactory {
  constructor(...args: CyberDataTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    dataTokenHub: string,
    contentURI: string,
    metadata: DataTypes.MetadataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<CyberDataToken> {
    return super.deploy(
      dataTokenHub,
      contentURI,
      metadata,
      overrides || {}
    ) as Promise<CyberDataToken>;
  }
  override getDeployTransaction(
    dataTokenHub: string,
    contentURI: string,
    metadata: DataTypes.MetadataStruct,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(
      dataTokenHub,
      contentURI,
      metadata,
      overrides || {}
    );
  }
  override attach(address: string): CyberDataToken {
    return super.attach(address) as CyberDataToken;
  }
  override connect(signer: Signer): CyberDataToken__factory {
    return super.connect(signer) as CyberDataToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CyberDataTokenInterface {
    return new utils.Interface(_abi) as CyberDataTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CyberDataToken {
    return new Contract(address, _abi, signerOrProvider) as CyberDataToken;
  }
}
